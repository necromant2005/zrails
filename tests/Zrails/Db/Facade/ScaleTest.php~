<?php
require_once 'Zrails/Db/Facade/Scale.php';

require_once './Zrails/Db/Facade/Scale/_files/tables/Users.php';

class Zrails_Db_Facade_ScaleTest extends PHPUnit_Framework_TestCase
{
    /**
     * Db horisontal scalable adapter
     * @var Zrails_Db_Facade_Scale
     */
    protected $_db = null;

    protected $_users = null;

    protected function setUp()
    {
        $this->_db = new Zrails_Db_Facade_Scale(array(
            "tables" => array(
                "users" => array(
                    "field"        => "id",
                    "strategy"     => "Zrails_Db_Facade_Scale_Strategy_Crc32",
                    "key_provider" => "Zrails_Db_Facade_Scale_Key_Provider_Random"
                ),
            ),
            "shards" => array(
                 0 => array(
                      'adapter' => 'Pdo_Mysql',
                      'params'  => array(
                          'host'     => '127.0.0.1',
                          'username' => 'root',
                          'password' => '',
                          'dbname'   => 'test0'
                      )
                  ),
                  1 => array(
                      'adapter' => 'Pdo_Mysql',
                      'params'  => array(
                          'host'     => '127.0.0.1',
                          'username' => 'root',
                          'password' => '',
                          'dbname'   => 'test1'
                      )
                  ),
        )));

        $this->_db->delete('users');
        $this->_users = new Users($this->_db);
    }

    public function testContShards()
    {
        $this->assertEquals($this->_db->getCountShards(), 2);
    }

    public function testIsConnected()
    {
        $this->assertTrue($this->_db->isConnected());
    }

    public function testGetScaleStrategy()
    {
        $strategy = $this->_db->getScaleStrategy('users');
        $this->assertEquals(get_class($strategy), 'Zrails_Db_Facade_Scale_Strategy_Crc32');
        $this->assertEquals($strategy->getField(), 'id');
    }

    public function testGetScaleStrategyNonExists()
    {
        try {
            $this->_db->getScaleStrategy('users_non_exists');
        } catch (Exception $e) {}
        $this->assertEquals(get_class($e), 'Zend_Db_Adapter_Exception');
    }

    public function testStrategySelectShard()
    {
        $strategy = $this->_db->getScaleStrategy('users');
        $this->assertEquals($strategy->getShardName(1), 0);
        $this->assertEquals($strategy->getShardName(10000000000), 1);
        $this->assertEquals($strategy->getShardName('abc'), 0);
        $this->assertEquals($strategy->getShardName('sdfasdf'), 1);
    }

    public function testStrategyGetShard()
    {
        $strategy = $this->_db->getScaleStrategy('users');
        $shard  = $strategy->getShard(1);
        $config = $shard->getConfig();
        $this->assertEquals(get_class($shard), 'Zend_Db_Adapter_Pdo_Mysql');
        $this->assertEquals($config['dbname'], 'test0');
    }

    public function testGetKeyProvider()
    {
        $provider = $this->_db->getScaleKeyProvider('users');
        $this->assertEquals(get_class($provider), 'Zrails_Db_Facade_Scale_Key_Provider_Random');
        $this->assertEquals($provider->getField(), 'id');
    }

    public function testGetKeyProviderNonExists()
    {
        try {
            $this->_db->getScaleKeyProvider('users_non_exists');
        } catch (Exception $e) {}
        $this->assertEquals(get_class($e), 'Zend_Db_Adapter_Exception');
    }

    public function testGetKeyProviderGenrateNewKey()
    {
        $provider = $this->_db->getScaleKeyProvider('users');
        $id = $provider->getUniqueId();
        $this->assertEquals(count($this->_users->find($id)), 0);
    }

    public function testInsertDbWithID()
    {
        $affectedRows = $this->_db->insert('users', array(
            "id"   => 5,
            "name" => "test-insert"
        ));
        $this->assertEquals($affectedRows, 1);

        $User = $this->_users->find(5)->current();
        $this->assertEquals($User->id, 5);
        $this->assertEquals($User->name, "test-insert");
    }

    public function testInsertModelWithID()
    {
        $this->_users->insert(array(
            "id"   => 5,
            "name" => "test-insert"
        ));

        $User = $this->_users->find(5)->current();
        $this->assertEquals($User->id, 5);
        $this->assertEquals($User->name, "test-insert");
    }

    public function testFetchOne()
    {
        foreach(array(1=>"peter", 2=>"kris", 4=>"jo") as $id=>$name) {
            $this->_db->insert('users', array('id'=>$id, 'name'=>$name));
            $User = $this->_users->find($id)->current();
            $this->assertEquals($User->id, $id);
            $this->assertEquals($User->name, $name);
        }
    }

    public function testFetchWithoutShard()
    {
        try {
            $this->_users->fetchAll("1");
        } catch (Zend_Db_Adapter_Exception $E) {}
        $this->assertEquals(get_class($E), "Zend_Db_Adapter_Exception");
    }


    public function testDelete()
    {
        $this->_users->insert(array(
            "id"   => 1,
            "name" => "test-insert"
        ));
        $User = $this->_users->find(1)->current();
        $User->delete();
        $UsersRows = $this->_users->find(1);
        $this->assertEquals(count($UsersRows), 0);
    }

    public function testUpdateWithoutMigrateObject()
    {
        $this->_users->insert(array(
            "id"   => 4,
            "name" => "jo"
        ));
        $User = $this->_users->find(4)->current();
        $User->name = "joseph";
        $User->save();
    }

    public function testUpdateWithMigrateObject()
    {
        $this->_users->insert(array(
            "id"   => 1,
            "name" => "jo"
        ));
        $User = $this->_users->find(1)->current();
        $User->id = 7;
        $User->save();

        $UsersRows = $this->_users->find(1);
        $this->assertEquals(count($UsersRows), 0);

        $User = $this->_users->find(7)->current();
        $this->assertEquals($User->id, 7);
    }

    public function testInsertWithAutogeneratedId()
    {
        $this->_users->insert(array(
            "name" => "test-insert"
        ));
        $id = $this->_db->lastInsertId();
        $User = $this->_users->find($id)->current();
        $this->assertEquals($User->id, $id);
        $this->assertEquals($User->name, "test-insert");
    }

    public function testListTables()
    {
        $this->assertEquals($this->_db->listTables(), array('users'));
    }

    public function testGetIterator()
    {
        $iterator = $this->_db->getIterator();
        $this->assertEquals(get_class($iterator), 'ArrayObject');
        $this->assertEquals(count($iterator), 2);
        foreach ($iterator as $connection) {
            $this->assertTrue($connection instanceof Zend_Db_Adapter_Abstract);
        }
    }

    public function testGetServerVersion()
    {
        $this->assertEquals($this->_db->getServerVersion(), '5.1.37');
    }

    public function testSupportParametr()
    {
        $this->assertTrue($this->_db->supportsParameters('INTEGER'));
    }

    public function testCloseConnection()
    {
        $this->assertNull($this->_db->closeConnection());
    }

    public function testSetFetchMode()
    {
        $this->_db->setFetchMode(Zend_Db::FETCH_NUM);
        foreach ($this->_db as $connection) {
            $this->assertEquals($connection->getFetchMode(), Zend_Db::FETCH_NUM);
        }
    }

    public function testPrepare()
    {
        $stmp = $this->_db->prepare('SELECT * FROM users WHERE id=?');
        $this->assertEquals(get_class($stmp), 'Zend_Db_Statement_Pdo');
    }
}

