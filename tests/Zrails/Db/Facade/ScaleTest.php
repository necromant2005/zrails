<?php
require_once '../library/Zrails/Db/Facade/Scale.php';

require_once './Zrails/Db/Facade/_files/UsersTable.php';

class Zrails_Db_Facade_ScaleTest extends PHPUnit_Framework_TestCase
{
    /**
     * Db horisontal scalable adapter
     * @var Core_Db_Adpater_Scale
     */
    protected $_db = null;

    protected $_users = null;

    protected function setUp()
    {
        $this->_db = new Zrails_Db_Facade_Scale(array(
            "tables" => array(
                "users" => array(
                    "scale"=> array(
                        "field"    => "id",
                        "strategy" => "Zrails_Db_Facade_Scale_Strategy_Crc32",
                    ),
                    "primary" => array(
                        "field"        =>"id",
                        "autogenerate" => true,
                        "provider"     => "Zrails_Db_Facade_Scale_Key_Provider_Random"
                     )
                ),
            ),
            "shards" => array(
                0 => Zend_Db::factory("Pdo_Mysql", array(
                         "host"     => "127.0.0.1",
                         "username" => "root",
                         "password" => "",
                         "dbname"   => "test1",
                    )
                ),
                1 => Zend_Db::factory("Pdo_Mysql", array(
                         "host"     => "127.0.0.1",
                         "username" => "root",
                         "password" => "",
                         "dbname"   => "test1",
                    )
                ),
        )));
        $this->_users = new UsersTable($this->_db);
    }


    public function testFetchOne()
    {
        foreach(array(1=>"peter", 2=>"kris", 4=>"jo") as $id=>$name) {
            $UsersRowset = $this->_users->find($id);
            $User = $UsersRowset->current();
            $this->assertEquals($User->id, $id);
            $this->assertEquals($User->name, $name);
        }
    }

    public function testFetchWithoutShard()
    {
        try {
            $this->_users->fetchAll("1");
        } catch (Zend_Db_Adapter_Exception $E) {}
        $this->assertIsA($E, "Zend_Db_Adapter_Exception");
    }

    public function testInsertWithID()
    {
        $this->_users->insert(array(
            "id"   => 5,
            "name" => "test-insert"
        ));

        $User = $this->_users->find(5)->current();
        $this->assertEquals($User->id, 5);
        $this->assertEquals($User->name, "test-insert");
    }

    public function testDelete()
    {
        $User = $this->_users->find(1)->current();
        $User->delete();
        $UsersRows = $this->_users->find(1);
        $this->assertEquals(count($UsersRows), 0);
    }

    public function testUpdateWithoutMigrateObject()
    {
        $User = $this->_users->find(4)->current();
        $User->name = "joseph";
        $User->save();
    }

    public function testUpdateWithMigrateObject()
    {
        $User = $this->_users->find(1)->current();
        $User->id = 7;
        $User->save();

        $UsersRows = $this->_users->find(1);
        $this->assertEquals(count($UsersRows), 0);

        $User = $this->_users->find(7)->current();
        $this->assertEquals($User->id, 7);
    }

    public function testInsertWithAutogeneratedId()
    {
        $id = $this->_users->insert(array(
            "name" => "test-insert"
        ));

        $User = $this->_users->find($id)->current();
        $this->assertEquals($User->id, $id);
        $this->assertEquals($User->name, "test-insert");
    }
}

